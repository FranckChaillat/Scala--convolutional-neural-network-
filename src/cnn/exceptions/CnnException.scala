package cnn.exceptions

/**
 * @author fra
 */


abstract class ExceptionMsg (val text : String) 
case object NO_INPUT_LAYER extends ExceptionMsg("No input layer have been detected, use the InputLayer type")
case object EMPTY_NETWORK extends ExceptionMsg("An error occured, the network has no layers")
case object NO_OUTPUT_LAYER extends ExceptionMsg("An error occured while getting the Network output, the last layer is malformed (no outneuron)")
case object NOT_FC extends ExceptionMsg("An error occured while getting the Network output, the network's output layer is not fully connected")
case object INVALID_LAYER_ORDER extends ExceptionMsg("Invalid layer type detected, please chech the layers order of your network")
case object PROCESSABLE_LAYER_ONLY extends ExceptionMsg("The network must only be composed of processable Layers")
case object GEN_INVALID_LAYER extends ExceptionMsg("An invalid Layer has been detected into the Network")
case object CONV_NEXTLAYER_MISS extends ExceptionMsg("The Convolution layer's convolution can't be achieved without next layer")
case object KERNEL_UPDATE_FAIL extends ExceptionMsg("The kernel update failed, unable to multiply matrices")
case object INVALID_LAST_LAYER extends ExceptionMsg("The current layer in an invalid one, the last layer is suposed to be a Fully connected layer with out neurons inside")
case object POOLING_SUM extends ExceptionMsg("An Error occured while summing delta matrices, please ensure the next layer is weel formed")
case object POOLING_CONST extends ExceptionMsg("Pooling layer must have the same number of input, activation and error matrices")
case object POOLING_MAX_NEIGHBOR extends ExceptionMsg("The given matrix dimentions must be divisible by the neighborhood values")
case object POOLING_UPSAMPLE_MAT_SIZE extends ExceptionMsg("The error matrix seems not to be as large as the corresponding subsampled one is the upsample method")
case object UPSAMPLING_MAT_COUNT extends ExceptionMsg("The number of input needs to be equals to the number of activation while upSampling")
case object FC_NEURON_CONSIST extends ExceptionMsg("Invalid Fully connected layer structure, please ensure that its non empty, all the neurons have the same activation function AND the same type, in a Fully connected layer")
case object FC_LINK_COUNT extends ExceptionMsg("the FCLayer doesn't have the right number of input in its inputLayer")
case object KERNEL_INVALID_ACTIVATION extends ExceptionMsg("Kernel can't have SOFTMAX activationFunction")
case object MAT_ADAPT extends ExceptionMsg("Error when trying to adapt a matrix to neuron type, the matrix is bigger than 1x1 one. Unable to adapt")
case object NEURON_INVALID_ACTIVATION extends ExceptionMsg("The softmax function can only be applied to an OutNeuron")
case object LINK_CONSIST_LENGTH extends ExceptionMsg("The length of the input doesn't correspond to the length of the weight matrix into the Link")
case object LINK_CONSIT extends ExceptionMsg("Unable to achieve back propagation, this link doesn't have any out neuron")
case object LINK_WEIGHT_MULT extends ExceptionMsg("Unable to multiple weight and input for one link")
case object CONV_KERNEL_COUNT extends ExceptionMsg("The number of kernel needs to be a non-prime number")
case object CONV_DIV extends ExceptionMsg("The base matrix can't be devided")
case object INVALID_OUT_LAYER extends ExceptionMsg("The last layer must be fully connected")
case object EMPTY_MAT extends ExceptionMsg("The input matrice can't be Empty for an example")
case object NO_ACTIVATION extends ExceptionMsg("The activation layer is empty and is not supposed to be empty")
case object BP_ERROR extends ExceptionMsg("Backpropagation error; The next layer has no delta or the current layer has not activation")
case object CONV_INVALID_RES extends ExceptionMsg("The convolution failed because the result accumulator is an empty matrix")
case object CONV_KERNEL_FORMAT_ERR extends ExceptionMsg("An error occured when trying to convolve kernel on matrix, the kernel is too large")
/**Image Loader exceptions**/
case object NOT_A_DIRECTORY extends ExceptionMsg("The specified path is'nt a valid directory")


case class ActivationException(msg : ExceptionMsg) extends Exception(msg.text)
case class BackPropagationException(msg : ExceptionMsg) extends Exception(msg.text)
case class ConvolutionDerivativeException(msg : ExceptionMsg) extends Exception(msg.text)
case class ConvolutionException(msg : ExceptionMsg) extends Exception(msg.text)
case class FCLayerStructureException(msg : ExceptionMsg) extends Exception(msg.text)
case class InvalidActivationFuncException(msg : ExceptionMsg) extends Exception(msg.text)
case class InvalidMatSizeException(msg : ExceptionMsg) extends Exception(msg.text)
case class InvalidNeuralUnitTypeException(msg : ExceptionMsg) extends Exception(msg.text)
case class LayerTypeException (msg : ExceptionMsg) extends Exception(msg.text)
case class MatCountException(msg : ExceptionMsg) extends Exception(msg.text)
case class MatTypeException(msg : ExceptionMsg) extends Exception(msg.text)
case class NeuronTypeException(msg : ExceptionMsg) extends Exception(msg.text)
case class NetworkStructureException(msg : ExceptionMsg) extends Exception(msg.text)
case class NeuralLinkException(msg : ExceptionMsg) extends Exception(msg.text)
case class NeuronActivationException(msg : ExceptionMsg) extends Exception(msg.text)
case class PoolingException(msg : ExceptionMsg) extends Exception(msg.text)
case class ExempleLoadException(msg : ExceptionMsg) extends Exception(msg.text)
